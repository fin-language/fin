// AUTOGENERATED FILE. Do not modify this file manually, it will be overwritten.
// finlang generated this file for C# `hal.InterfaceMethodInvocationTest.IBike` type.
// Source file: `LedBlinker/test_stuff/InterfaceMethodInvocationTest.cs` (relative to C# solution).

#pragma once

#include <stdint.h>
#include "hal_InterfaceMethodInvocationTest_IVehicle.h"
#include <stddef.h>
#include <assert.h>


typedef struct hal_InterfaceMethodInvocationTest_IBike hal_InterfaceMethodInvocationTest_IBike;
typedef struct hal_InterfaceMethodInvocationTest_IBike_vtable hal_InterfaceMethodInvocationTest_IBike_vtable;

struct hal_InterfaceMethodInvocationTest_IBike
{
    /** Pointer to implementing object's vtable for this interface */
    hal_InterfaceMethodInvocationTest_IBike_vtable const * const obj_vtable;

    /** The actual object that implements this interface */
    void * const obj;
};

struct hal_InterfaceMethodInvocationTest_IBike_vtable
{
        uint8_t (*get_id)(void * self);
        void (*pedal)(void * self);
};

uint8_t hal_InterfaceMethodInvocationTest_IBike_get_id(hal_InterfaceMethodInvocationTest_IBike * self);

void hal_InterfaceMethodInvocationTest_IBike_pedal(hal_InterfaceMethodInvocationTest_IBike * self);


// Up conversion from hal_InterfaceMethodInvocationTest_IBike interface to hal_InterfaceMethodInvocationTest_IVehicle interface
// `self_arg` should be of type `hal_InterfaceMethodInvocationTest_IBike *`
// MAA stands for Macro Aggregate Assignment. See https://github.com/fin-language/fin/issues/60 
#define MAA_hal_InterfaceMethodInvocationTest_IBike__to__hal_InterfaceMethodInvocationTest_IVehicle(self_arg)    { .obj = self_arg->obj, .obj_vtable = (const hal_InterfaceMethodInvocationTest_IVehicle_vtable*)(&self_arg->obj_vtable->get_id) }
// MCL stands for Macro Compound Literal. See https://github.com/fin-language/fin/issues/60 
#define MCL_hal_InterfaceMethodInvocationTest_IBike__to__hal_InterfaceMethodInvocationTest_IVehicle(self_arg)    (hal_InterfaceMethodInvocationTest_IVehicle){ .obj = self_arg->obj, .obj_vtable = (const hal_InterfaceMethodInvocationTest_IVehicle_vtable*)(&self_arg->obj_vtable->get_id) }
// assert that vtable layouts are compatible
static_assert(offsetof(hal_InterfaceMethodInvocationTest_IVehicle_vtable, get_id) == 0, "Unexpected vtable function start");
static_assert(offsetof(hal_InterfaceMethodInvocationTest_IVehicle_vtable, get_id) == offsetof(hal_InterfaceMethodInvocationTest_IBike_vtable, get_id) - offsetof(hal_InterfaceMethodInvocationTest_IBike_vtable, get_id), "Incompatible vtable layout");
